Y <- sample(y, 25)
mean(Y)
abs((y-x) - (X-Y)
)
x
abs((mean(y)-mean(x)) - (X-Y))
x
mean(x)
mean(y)
mean(X)
mean(Y)
mean(y)-mean(x)
(X-Y)
X
(mean(y)-mean(x)) - (mean(X)-mean(Y))
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
mean(x)
#Now use the rafalib package and use the popsd function to compute the population standard deviation.
install.packages("rafalib")
library(rafalib)
popsd(x)
#Set the seed at 1. Take a random sample X of size 25 from x. What is the sample average?
set.seed(1)
X <- sample(x,25)
mean(X)
#Use dplyr to create a vector y with the body weight of all males on the high fat hf) diet.
#What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist()
mean(y)
popsd(y)
#Set the seed at 1. Take a random sample Y of size 25 from y. What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
#What is the difference in absolute value between y¯−x¯ and X¯−Y¯?
(mean(y)-mean(x)) - (mean(X)-mean(Y))
install.packages("rafalib")
x <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
mean(x)
#Now use the rafalib package and use the popsd function to compute the population standard deviation.
#install.packages("rafalib")
library(rafalib)
popsd(x)
#Set the seed at 1. Take a random sample X of size 25 from x. What is the sample average?
set.seed(1)
X <- sample(x,25)
mean(X)
#Use dplyr to create a vector y with the body weight of all males on the high fat hf) diet.
#What is this population's average?
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist()
mean(y)
popsd(y)
#Set the seed at 1. Take a random sample Y of size 25 from y. What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
#What is the difference in absolute value between y¯−x¯ and X¯−Y¯?
(mean(y)-mean(x)) - (mean(X)-mean(Y))
mean(y)-mean(x)
mean(X)-mean(Y)
abs((mean(y)-mean(x))) - abs((mean(X)-mean(Y)))
abs((mean(y)-mean(x)))
abs((mean(X)-mean(Y)))
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
mean(x)
#Now use the rafalib package and use the popsd function to compute the population standard deviation.
#install.packages("rafalib")
library(rafalib)
popsd(x)
#Set the seed at 1. Take a random sample X of size 25 from x. What is the sample average?
set.seed(1)
X <- sample(x,25)
mean(X)
#Use dplyr to create a vector y with the body weight of all males on the high fat hf) diet.
#What is this population's average?
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist()
mean(y)
popsd(y)
#Set the seed at 1. Take a random sample Y of size 25 from y. What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
#What is the difference in absolute value between y¯−x¯ and X¯−Y¯?
abs((mean(y)-mean(x))) - abs((mean(X)-mean(Y)))
abs((mean(y)-mean(x)))
abs((mean(X)-mean(Y)))
abs((mean(y)-mean(x))) - abs((mean(X)-mean(Y)))
head(dat)
levels(dat$Diet)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
popsd(y)
mean (y <= mean(y)-popsd(y))
mean (y <= mean(y)+popsd(y))
y <= mean(y)+popsd(y)
mean (mean(y)popsd(y) >=y <= mean(y)+popsd(y))
mean (mean(y)popsd(y) >=y <= mean(y)+popsd(y))
mean (mean(y)-popsd(y) >=y <= mean(y)+popsd(y))
mean (mean(y)-popsd(y) <= y <= mean(y)+popsd(y))
mean ((mean(y)-popsd(y)) <= y <= (mean(y)+popsd(y))
y
((mean(y)-popsd(y)) <= y <= (mean(y)+popsd(y))
(mean(y)-popsd(y))
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
install.packages("rmarkdown")
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(rmarkdowb)
library(rmarkdown)
---
title: "Untitled"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
library(dplyr)
dat <- read.csv("femaleMiceWeights.csv")
controls <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist()
treatment <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist()
mean(treatment) - mean(controls)
#but is this significant?
population <- read.csv("femaleControlsPopulation.csv")
population <- unlist(population)
mean(sample(population, 12)) # a random variable (of the population)
#for quiz:
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
set.seed(5)
abs(mean(sample(x, 5)) - mean(x))
#p value demonstration:
obs <- mean(treatment) - mean(controls)
population <- read.csv("femaleControlsPopulation.csv")
population <- unlist(population)
n <- 10000
nulls <- vector("numeric", n)
for(i in 1:n){
control <- ( sample(population, 12))
treatment <- (sample(population, 12))
nulls[i] <- mean(treatment) - mean(control)
}
nulls
hist(nulls) #null distribution
sum( nulls > obs) / n
mean (abs( nulls) > obs ) # the p value
#for quiz
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
#Set the seed at 1, then using a for-loop take a random sample of 5 mice 1,000 times.
#Save these averages.
#What proportion of these 1,000 averages are more than 1 gram away from the average of x ?
set.seed(1)
n <- 1000
out <- vector("numeric", n)
for(i in 1:n){
out[i] <- mean(sample(x,50))
}
mean((abs((out) - mean(x)) >1))
#install.packages("gapminder")
library(gapminder)
data(gapminder)
head(gapminder)
#Create a vector 'x' of the life expectancies of each country for the year 1952.
#Plot a histogram of these life expectancies to see the spread of the different countries.
x <- filter(gapminder, year==1952) %>% select(lifeExp) %>% unlist()
hist(x)
mean (x <= 40)
#What is the proportion of countries in 1952 that have a life expectancy between 40 and 60 years?
#Hint: this is the proportion that have a life expectancy less than or equal to 60 years,
#minus the proportion that have a life expectancy less than or equal to 40 years.
mean (x <= 60) - mean (x <= 40)
prop = function(q) {
mean(x <= q)
}
prop(40)
qs = seq(from=min(x), to=max(x), length=20)
qs
props <- sapply(qs, prop)
props
plot(qs,props)
plot(ecdf(x))
#for quiz:
library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/femaleControlsPopulation.csv"
filename <- basename(url)
download(url, destfile=filename)
x <- unlist( read.csv(filename) )
#Using the same process as before (in Null Distribution Exercises), set the seed at 1, then using a #
#for-loop take a random sample of 5 mice 1,000 times. Save these averages. After that, set the seed at 1, #
#then using a for-loop take a random sample of 50 mice 1,000 times. Save these averages.
set.seed(1)
n <- 1000
out50 <- vector("numeric", n)
for(i in 1:n){
out50[i] <- mean(sample(x,50))
}
hist(out50)
#For the last set of averages, the ones obtained from a sample size of 50, what proportion are between 23 and 25?
mean (out50 <= 25) - mean (out50 <= 23)
#Now ask the same question of a normal distribution with average 23.9 and standard deviation 0.43.
set.seed(1)
tmp <- rnorm(1000, mean=23.9, sd= 0.43)
mean (tmp <= 25) - mean (tmp <= 23)
#library(downloader)
url <- "https://raw.githubusercontent.com/genomicsclass/dagdata/master/inst/extdata/mice_pheno.csv"
filename <- basename(url)
download(url, destfile=filename)
dat <- read.csv(filename)
dat <- na.omit( dat )
head(dat)
#Use dplyr to create a vector x with the body weight of all males on the control (chow) diet.
#What is this *****population's average?
library(dplyr)
x <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
mean(x)
#Now use the rafalib package and use the popsd function to compute the population standard deviation.
#install.packages("rafalib")
library(rafalib)
popsd(x)
#Set the seed at 1. Take a random sample X of size 25 from x. What is the sample average?
set.seed(1)
X <- sample(x,25)
mean(X)
#Use dplyr to create a vector y with the body weight of all males on the high fat hf) diet.
#What is this population's average?
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist()
mean(y)
popsd(y)
#Set the seed at 1. Take a random sample Y of size 25 from y. What is the sample average?
set.seed(1)
Y <- sample(y, 25)
mean(Y)
#What is the difference in absolute value between y¯−x¯ and X¯−Y¯?
abs((mean(y)-mean(x))) - abs((mean(X)-mean(Y)))
#Define y to be the weights of males on the control diet. What proportion of the mice are
# within one standard deviation away from the average weight (remember to use popsd for the population sd)?
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
abs((mean(y)-mean(x))) - abs((mean(X)-mean(Y)))
y
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist()
y
mean(y)+popsd(y)
mean(y)-popsd(y)
mean(y)-popsd(y) <= y
mean(mean(y)-popsd(y) <= y)
mean(mean(y)-popsd(y) <= y <=mean(y)+popsd(y))
mean(mean(y)-popsd(y) <= y <= mean(y)+popsd(y))
mean(y)-popsd(y) <= y <= mean(y)+popsd(y)
(y <= mean - popsd(y))
(y <= mean(y) - popsd(y))
(y <= (mean(y) - popsd(y)))
mean(y <= (mean(y) - popsd(y)))
mean(y <= (mean(y) + popsd(y)))
mean(y <= (mean(y) + popsd(y))) - mean(y <= (mean(y) - popsd(y)))
mean(y <= (mean(y) + 2*popsd(y))) - mean(y <= (mean(y) - 2*popsd(y)))
mean(y <= (mean(y) + 3*popsd(y))) - mean(y <= (mean(y) - 3*popsd(y)))
qqnorm(z)
qqnorm(y)
abline(0,1)
mypar(2,2)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
y <- filter(dat, Sex=="F" & Diet=="chow") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
y <- filter(dat, Sex=="M" & Diet=="hf") %>% select(Bodyweight) %>% unlist
qqnorm(z);abline(0,1)
qqnorm(z);abline(0,1)
z <- ( y - mean(y) ) / popsd(y)
y <- filter(dat, Sex=="F" & Diet=="hf") %>% select(Bodyweight) %>% unlist
z <- ( y - mean(y) ) / popsd(y)
qqnorm(z);abline(0,1)
set.seed(1)
y <- filter(dat, Sex=="M" & Diet=="chow") %>% select(Bodyweight) %>% unlist
y
avgs <- replicate(10000, mean( sample(y, 25)))
avgs
mypar(1,2)
hist(avgs)
qqnorm(avgs)
qqline(avgs)
mean(avgs)
popsd(avgs)
dat <- read.csv("femaleMiceWeights.csv")
dat
controls <- filter(dat, Diet=="chow") %>% select(Bodyweight) %>% unlist()
treatment <- filter(dat, Diet=="hf") %>% select(Bodyweight) %>% unlist()
obs <- mean(treatment) - mean(controls)
obs
diff <- mean(treatment) - mean(controls)
print(diff)
se <- sqrt( var(treatment)/length(treatment) + var(control)/length(control))
se
var(treatment)
diff
se
tstat <- diff/se
tstat
library(reshape2)
library(ggplot2)
library(grid)
library(plyr)
library(dplyr)
source("C:/Users/paulm/Documents/R/source/functions.R")
source("C:/Users/paulm/Documents/R/source/plotting_themes.R")
############################ Spleen plots ##################################
#read in data from each experiment:
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dat<-read.csv("QR spleen kinetics.csv", colClasses=c(Sex="factor"))
#change directory to pooled_data directory
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dir.create("Spleen")
setwd("./Spleen")
dat<-dat[,c(1:5,8:22)]  #Take just the necessary columns
dat<-dat[,c(1:5,8:22)]  #Take just the necessary columns
#calculate absolute counts with bead numbers
factor <- (5*983)/(dat[,6]+dat[,7])
dat[,8:14]
dat$Mouse
names(dat)
dat[,1:2]
#read in data from each experiment:
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dat<-read.csv("QR spleen kinetics.csv", colClasses=c(Sex="factor"))
#change directory to pooled_data directory
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dir.create("Spleen")
setwd("./Spleen")
dat<-dat[,c(1:5,8:22)]  #Take just the necessary columns
#calculate absolute counts with bead numbers
factor <- (5*983)/(dat[,6]+dat[,7])
tmp <- dat[,8:14]*factor
tmp[1:6,] <- tmp[1:6,]*10 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
tmp[11:24,] <- tmp[11:24,]*4 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
dat <- dat[,c(1:5,15:20)]
dat <- cbind(dat,tmp)
datlt <- dat  #log10 transform
datlt[6:ncol(dat)] <- log10(dat[6:ncol(dat)])
tall<-melt(datlt,id.vars=c("Exp","Week","Strain","Sex","Irradiation.Dose"),na.rm=TRUE)  #id.vars refer to the things you want to keep linked
names(tall)[names(tall) == 'variable'] <- 'Lineage'
#Change/merge 150 and 900 both to irradiated, so that there are only 2 groups (unirradiated and irradiated).
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="0 Rad"] <- "Non-irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="150 Rad"] <- "Irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="900 Rad"] <- "Irradiated"
datst <- ddply(tall, c("Week","Strain","Sex","Irradiation.Dose","Lineage"), summarise,
N    = sum(!is.na(value)),
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE),
se   = sd / sqrt(N)
)
datst
#read in data from each experiment:
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dat<-read.csv("QR spleen kinetics.csv", colClasses=c(Sex="factor"))
#change directory to pooled_data directory
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dir.create("Spleen")
setwd("./Spleen")
dat<-dat[,c(1:5,8:22)]  #Take just the necessary columns
#calculate absolute counts with bead numbers
factor <- (5*983)/(dat[,6]+dat[,7])
tmp <- dat[,8:14]*factor
tmp[1:6,] <- tmp[1:6,]*10 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
tmp[11:24,] <- tmp[11:24,]*4 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
dat <- dat[,c(1:5,15:20)]
dat <- cbind(dat,tmp)
dat
names(dat)
dat[,6:11][dat[,6:11] < 0.01] <- 0.01  #change low values to detection threshold
dat[,12:18][dat[,12:18] < 10] <- 10  #change low values to detection threshold
datlt <- dat  #log10 transform
datlt[6:ncol(dat)] <- log10(dat[6:ncol(dat)])
tall<-melt(datlt,id.vars=c("Exp","Week","Strain","Sex","Irradiation.Dose"),na.rm=TRUE)  #id.vars refer to the things you want to keep linked
#merge male and female
#levels(tall$Sex)[levels(tall$Sex)=="M"] <- "both"
#levels(tall$Sex)[levels(tall$Sex)=="F"] <- "both"
names(tall)[names(tall) == 'variable'] <- 'Lineage'
#Change/merge 150 and 900 both to irradiated, so that there are only 2 groups (unirradiated and irradiated).
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="0 Rad"] <- "Non-irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="150 Rad"] <- "Irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="900 Rad"] <- "Irradiated"
##** toggles
#tall <- tall[tall$Irradiation.Dose=="Irradiated",]
datst <- ddply(tall, c("Week","Strain","Sex","Irradiation.Dose","Lineage"), summarise,
N    = sum(!is.na(value)),
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE),
se   = sd / sqrt(N)
)
datst
tp<-datst[datst$Week=='30',]   #Take a single timepoint
#subset by lineage so that each can be plotted separately
CD45<-datst[datst$Lineage == "CD45",]
GPA<-datst[datst$Lineage == "GPA",]
GM<-datst[datst$Lineage == "CD33.15",]
B<-datst[datst$Lineage == "CD19",]
T<-datst[datst$Lineage == "CD3",]
CD34<-datst[datst$Lineage == "CD34",]
CD45
plot(CD45$Lineage)
plot(CD45$mean)
plot(CD45$mean~Sex)
plot(CD45$mean~CD45$Sex)
plot(CD45$mean~CD45$Irradiation.Dose)
plot(CD45$mean~CD45$Strain)
#read in data from each experiment:
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dat<-read.csv("QR spleen kinetics.csv", colClasses=c(Sex="factor"))
#change directory to pooled_data directory
setwd("C:/Users/paulm/CRC Paul/PROJECTS/NRG_W41/primary_kinetics_pool/figures")
dir.create("Spleen")
setwd("./Spleen")
dat<-dat[,c(1:5,8:22)]  #Take just the necessary columns
#calculate absolute counts with bead numbers
factor <- (5*983)/(dat[,6]+dat[,7])
tmp <- dat[,8:14]*factor
tmp[1:6,] <- tmp[1:6,]*10 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
tmp[11:24,] <- tmp[11:24,]*4 #Multiply R mice by 10 (because FACed just 10%) Both had 5uL beads.
dat <- dat[,c(1:5,15:20)]
dat <- cbind(dat,tmp)
dat[,6:11][dat[,6:11] < 0.01] <- 0.01  #change low values to detection threshold
dat[,12:18][dat[,12:18] < 10] <- 10  #change low values to detection threshold
datlt <- dat  #log10 transform
datlt[6:ncol(dat)] <- log10(dat[6:ncol(dat)])
tall<-melt(datlt,id.vars=c("Exp","Week","Strain","Sex","Irradiation.Dose"),na.rm=TRUE)  #id.vars refer to the things you want to keep linked
#merge male and female
#levels(tall$Sex)[levels(tall$Sex)=="M"] <- "both"
#levels(tall$Sex)[levels(tall$Sex)=="F"] <- "both"
names(tall)[names(tall) == 'variable'] <- 'Lineage'
#Change/merge 150 and 900 both to irradiated, so that there are only 2 groups (unirradiated and irradiated).
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="0 Rad"] <- "Non-irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="150 Rad"] <- "Irradiated"
levels(tall$Irradiation.Dose)[levels(tall$Irradiation.Dose)=="900 Rad"] <- "Irradiated"
##** toggles
#tall <- tall[tall$Irradiation.Dose=="Irradiated",]
datst <- ddply(tall, c("Week","Strain","Sex","Irradiation.Dose","Lineage"), summarise,
N    = sum(!is.na(value)),
mean = mean(value, na.rm=TRUE),
sd   = sd(value, na.rm=TRUE),
se   = sd / sqrt(N)
)
# THIS STOPPED WORKING. USE ddply INSTEAD. datst <- summarySE(tall, measurevar="value", groupvars=c("Week","Strain","Sex","Irradiation.Dose","Lineage"),na.rm=TRUE)   # summarySE provides the std dev, SEM, and (default 95%) confidence interval. #measurevar is the x-axis
tp<-datst[datst$Week=='30',]   #Take a single timepoint
#subset by lineage so that each can be plotted separately
CD45<-datst[datst$Lineage == "CD45",]
GPA<-datst[datst$Lineage == "GPA",]
GM<-datst[datst$Lineage == "CD33.15",]
B<-datst[datst$Lineage == "CD19",]
T<-datst[datst$Lineage == "CD3",]
CD34<-datst[datst$Lineage == "CD34",]
CD45
plot(CD45$mean~CD45$Sex)
plot(CD45$mean~CD45$Irradiation.Dose)
plot(CD45$mean~CD45$Strain)
e
plot(CD45$mean~CD45$Irradiation.Dose)
plot(CD45$mean~CD45$Sex)
VResponse <- c(1,0,3,2)
ZResponse <- c(1,0,3,3)
VResponse + ZResponse
c(3,2,3,3) + c(3,2,3,3)
